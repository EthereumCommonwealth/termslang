; TERMS
; Copyright (c) 2017
; Mikhail Baynov m.baynov@gmail.com
;
; Official macro set


>> CALLER CALLER
>> REVENUE CALLVALUE
>> STACKCOPY DUP1
>> STACK
>> RECORD SLOAD
>> BLOCKNUMBER NUMBER
>> CONTRACT ADDRESS
>> BALANCE BALANCE
>> ORIGIN ORIGIN
>> CALLDATASIZE CALLDATASIZE
>> GASPRICE GASPRICE
>> COINBASE COINBASE
>> TIMESTAMP TIMESTAMP
>> DIFFICULTY DIFFICULTY
>> GASLIMIT GASLIMIT
>> PC PC
>> MSIZE MSIZE
>> GAS GAS
>> GASLIMIT GASLIMIT


## conditions
INIT

## payable fallback
FALLBACK ()

## undo record changes
REVERT

## write ^1 to record ^2
PUSH ^1
MLOAD
PUSH ^2
SSTORE

## write ^1 to record at ^2
PUSH* ^1
PUSH* ^2
SSTORE

## write record ^1
PUSH ^1
MLOAD
PUSH ^1
SSTORE

## let ^1 get argument 1
PUSH 0x04
CALLDATALOAD
PUSH ^1
MSTORE

## let ^1 get argument 2
PUSH 0x24
CALLDATALOAD
PUSH ^1
MSTORE

## let ^1 get argument 3
PUSH 0x44
CALLDATALOAD
PUSH ^1
MSTORE

## let ^1 get argument ^2
PUSH 0x1c
PUSH 0x20
PUSH ^2
MUL
SUB
CALLDATALOAD
PUSH ^1
MSTORE

## jumpdest ^1
JUMPDEST ^1

## constant ^1
JUMPDEST ^1

## procedure ^1
JUMPDEST ^1

## see ^1
JUMP ^1

## apply procedure ^1
REFJUMP ^1

## procedure end
BACKJUMP

## return
STOP

## stop
STOP

## suicide
CALLER
SUICIDE

## false ^1
CONDITIONNOT ^1

## else ^1
CONDITIONYES ^1

## end ^1
CONDITIONEND ^1

## push ^1
PUSH* ^1

## comp +
ADD

## comp -
SUB

## comp *
MUL

## comp /
DIV

## comp %
MOD

## comp ^
EXP

## comp ==
EQ

## comp !=
SUB

## comp <
LT

## comp >
GT

## comp >=
LT
ISZERO

## comp <=
GT
ISZERO

## comp and
AND

## comp or
OR

## comp not
ISZERO

## grab record ^1
PUSH ^1
DUP1
SLOAD
SWAP1
MSTORE

## let ^1 point to ^2
PUSH ^2
PUSH ^1
MSTORE

## let ^1 = ^2
PUSH* ^2
PUSH ^1
MSTORE

## let ^1 get ^2
PUSH* ^2
PUSH ^1
MSTORE

## increment ^1
PUSH 0x01
PUSH* ^1
ADD
PUSH ^1
MSTORE

## decrement ^1
PUSH 0x01
PUSH* ^1
SUB
PUSH ^1
MSTORE

## increment ^1 by ^2
PUSH* ^2
PUSH* ^1
ADD
PUSH ^1
MSTORE

## decrement ^1 by ^2
PUSH* ^2
PUSH* ^1
SUB
PUSH ^1
MSTORE

## let ^1 = ^2 + ^3
PUSH* ^3
PUSH* ^2
ADD
PUSH ^1
MSTORE

## let ^1 = ^2 * ^3
PUSH* ^3
PUSH* ^2
MUL
PUSH ^1
MSTORE

## let ^1 = ^2 - ^3
PUSH* ^3
PUSH* ^2
SUB
PUSH ^1
MSTORE

## let ^1 = ^2 / ^3
PUSH* ^3
PUSH* ^2
DIV
PUSH ^1
MSTORE

## let ^1 = ^2 % ^3
PUSH* ^3
PUSH* ^2
MOD
PUSH ^1
MSTORE

## let ^1 = ^2 exp ^3
PUSH* ^3
PUSH* ^2
EXP
PUSH ^1
MSTORE

## return bytes32 at ^1
PUSH 0x20
PUSH ^1
RETURN

## return uint256 at ^1
PUSH 0x20
PUSH ^1
RETURN

## return bool at ^1
PUSH 0x20
PUSH ^1
RETURN

## return address at ^1
PUSH 0x14
PUSH ^1
PUSH 0x0C
ADD
RETURN

## let stack read record ^1
PUSH ^1
SLOAD

## let ^1 read record ^2
PUSH* ^2
SLOAD
PUSH ^1
MSTORE

## read record ^1 into ^2 , ^3
PUSH ^1
SLOAD
DUP1
PUSH 0x80
PUSH 0x02
EXP
SWAP1
DIV
PUSH ^2
MSTORE
PUSH 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
AND
PUSH ^3
MSTORE

## write packed ^1 , ^2 to record ^3
PUSH* ^1
PUSH 0x80
PUSH 0x02
EXP
MUL
PUSH* ^2
PUSH 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
AND
OR
PUSH ^3
SSTORE

## read record ^1 into bytes12 ^2 , address ^3
PUSH ^1
SLOAD
DUP1
PUSH 0xa0
PUSH 0x02
EXP
SWAP1
DIV
PUSH ^2
MSTORE
PUSH 0x60
PUSH 0x02
EXP
DUP1
SWAP2
MUL
DIV
PUSH ^3
MSTORE

## read record ^1 into bytes12 ^2 , address void
PUSH ^1
SLOAD
PUSH 0xa0
PUSH 0x02
EXP
SWAP1
DIV
PUSH ^2
MSTORE

## write packed bytes12 ^1 , address ^2 to record ^3
PUSH* ^1
PUSH 0xa0
PUSH 0x02
EXP
MUL
PUSH* ^2
OR
PUSH ^3
SSTORE

## let ^1 get string argument ^2
PUSH 0x1c
PUSH 0x20
PUSH ^2
MUL
SUB
CALLDATALOAD
PUSH 0x04
ADD
DUP1
CALLDATALOAD
DUP1
PUSH ^1
MSTORE
PUSH 0x20
ADD
SWAP1
PUSH ^1
SWAP1
JUMPDEST loop
PUSH 0x20
ADD
DUP1
SWAP2
PUSH 0x20
ADD
DUP1
SWAP3
CALLDATALOAD
SWAP1
MSTORE
SWAP2
PUSH 0x20
SWAP1
SUB
SWAP2
DUP3
PUSH 0x20
LT
JUMPI loop

## return string at ^1
PUSH ^1
PUSH 0x00
MSTORE
PUSH ^1
DUP1
MLOAD
ADD
PUSH 0x20
ADD
PUSH 0x00
RETURN

## grab string ^1
PUSH ^1
JUMPDEST loop
DUP1
DUP1
SLOAD
SWAP1
MSTORE
PUSH 0x20
ADD
DUP1
SLOAD
JUMPI loop

## write string ^1
PUSH ^1
DUP1
DUP1
MLOAD
JUMPDEST loop
SWAP1
SSTORE
PUSH 0x20
ADD
DUP1
DUP1
MLOAD
DUP1
JUMPI loop

## write string ^1 to record ^2
PUSH ^2
SSTORESEQ ^1

## let ^1 = string ^2
PUSH ^1
MSTORESEQ ^2

## log data ^1
PUSH 0x20
PUSH ^1
LOG0

## log ^1
PUSH ^1
SLOAD
PUSH 0x20
DUP1
LOG1

## log ^1 with topic ^2
PUSH* ^2
PUSH ^1
SLOAD
PUSH 0x20
DUP1
LOG2

## log ^1 with topic ^2 , data ^3
PUSH* ^2
PUSH ^1
SLOAD
PUSH 0x20
PUSH ^3
LOG3

## log ^1 with topics ^2 , ^3
PUSH* ^3
PUSH* ^2
PUSH ^1
SLOAD
PUSH 0x20
PUSH 0x20
LOG3

## log ^1 with topics ^2 , ^3 , data ^4
PUSH* ^3
PUSH* ^2
PUSH ^1
SLOAD
PUSH 0x20
PUSH ^4
LOG3

## log ^1 with topics ^2 , ^3 , ^4
PUSH* ^4
PUSH* ^3
PUSH* ^2
PUSH ^1
SLOAD
PUSH1 0x20
DUP1
LOG4

## send ^1 to ^2 or see ^3 on failure
PUSH* ^1
ISZERO
JUMPI ^3
PUSH 0x00
PUSH 0x00
PUSH 0x00
PUSH 0x00
PUSH* ^1
PUSH* ^2
PUSH 0x64
GAS
SUB
CALL
ISZERO
JUMPI ^3

## let ^1 read record ^2 of ^3
PUSH* ^3
PUSH ^2
PUSH 0x20
MUL
ADD
SLOAD
PUSH ^1
MSTORE

## write ^1 to record ^2 of ^3
PUSH* ^1
PUSH* ^3
PUSH ^2
PUSH 0x20
MUL
ADD
SSTORE

## let stack read record ^1 of ^2
PUSH* ^2
PUSH ^1
PUSH 0x20
MUL
ADD
SLOAD

## write stack to record ^1 of ^2
PUSH* ^2
PUSH ^1
PUSH 0x20
MUL
ADD
SSTORE

## let stack get hash of block ^1
PUSH* ^1
BLOCKHASH

## let stack read record
SLOAD

## write record stack value
SSTORE

## write stack value to record ^1
PUSH ^1
SSTORE

## write ^1 to record stack
PUSH* ^1
SWAP1
SSTORE

## send ^1 to ^2
PUSH 0x00
PUSH 0x00
PUSH 0x00
PUSH 0x00
PUSH* ^1
PUSH* ^2
PUSH 0x64
GAS
SUB
CALL


## set function ^1 with selector ^2 of contract ^3
PUSH* ^2
PUSH ^1
MSTORE
PUSH* ^3
PUSH 0x04
PUSH ^1
SUB
MSTORE

; ;call(gas, to address, value, input_offset, input_size, output_offset, output_size)
## let ^1 call function ^2
PUSH 0x20
PUSH ^1
PUSH 0x20
PUSH 0x04
PUSH ^2
JUMPDEST loop
SWAP1
PUSH 0x20
ADD
SWAP1
PUSH 0x20
ADD
DUP1
MLOAD
JUMPI loop
POP
SUB
PUSH ^2
PUSH 0x1c
ADD
PUSH 0x00
PUSH 0x04
PUSH ^2
SUB
MLOAD
PUSH 0x64
GAS
SUB
CALL

## let ^1 find index of ^2 in ^3
PUSH 0x20
DUP1
DUP1
JUMPDEST loop
PUSH ^3
ADD
SLOAD
DUP1
ISZERO
JUMPI end0
PUSH* ^2
EQ
JUMPI end
PUSH 0x20
ADD
DUP1
JUMP loop
JUMPDEST end0
POP
POP
POP
PUSH 0x00
JUMPDEST end
DIV
PUSH ^1
MSTORE

## find index ^1 of address ^2 packed in ^3 of bytes12 , address
PUSH 0x20
DUP1
DUP1
JUMPDEST loop
PUSH ^3
ADD
SLOAD
DUP1
ISZERO
JUMPI end0
PUSH 0x60
PUSH 0x02
EXP
DUP1
SWAP2
MUL
DIV
PUSH* ^2
EQ
JUMPI end
PUSH 0x20
ADD
DUP1
JUMP loop
JUMPDEST end0
POP
POP
POP
PUSH 0x00
JUMPDEST end
DIV
PUSH ^1
MSTORE

## let ^1 = address from ^2
PUSH* ^2
PUSH 0x60
PUSH 0x02
EXP
DUP1
SWAP2
MUL
DIV
PUSH ^1
MSTORE

## find index ^1 for address ^2 packed in ^3 of bytes12 , address
PUSH 0x00
PUSH 0x20
JUMPDEST loop
DUP1
PUSH ^3
ADD
SLOAD
DUP1
DUP1
ISZERO
JUMPI end_of_seq
PUSH 0x60
PUSH 0x02
EXP
DUP1
SWAP2
MUL
DIV
DUP1
PUSH* ^2
EQ
JUMPI address_match
EQ
JUMPI set_replacespot
PUSH 0x20
ADD
JUMP loop
JUMPDEST set_replacespot
SWAP1
POP
DUP1
PUSH 0x20
ADD
JUMP loop
JUMPDEST end_of_seq
POP
POP
SWAP1
DUP1
JUMPI finish
SWAP1
JUMP finish
JUMPDEST address_match
POP
POP
JUMPDEST finish
PUSH 0x20
SWAP1
DIV
PUSH ^1
MSTORE

## let ^1 get byte ^2 of ^3
PUSH* ^2
PUSH 0x20
SUB
PUSH 0x0100
EXP
PUSH* ^3
DIV
PUSH 0xff
AND
PUSH ^1
MSTORE

## let ^1 get halfbyte ^2 of ^3
PUSH* ^2
PUSH 0x01
ADD
DUP1
PUSH 0x02
SWAP1
DIV
PUSH 0x20
SUB
PUSH 0x0100
EXP
PUSH* ^3
DIV
SWAP1
PUSH 0x02
SWAP1
MOD
JUMPI odd
PUSH 0x10
SWAP1
DIV
JUMPDEST odd
PUSH 0x0f
AND
PUSH ^1
MSTORE

## set byte ^1 of ^2 to ^3
PUSH* ^1
PUSH 0x20
SUB
PUSH 0x0100
EXP
DUP1
PUSH* ^3
MUL
SWAP1
PUSH 0xff
MUL
NOT
PUSH* ^2
AND
ADD
PUSH ^2
MSTORE

## set halfbyte ^1 of ^2 to ^3
PUSH* ^1
PUSH 0x01
ADD
DUP1
DUP1
PUSH 0x02
SWAP1
DIV
PUSH 0x20
SUB
PUSH 0x0100
EXP
SWAP1
PUSH 0x02
SWAP1
MOD
JUMPI odd
PUSH 0x10
MUL
JUMPDEST odd
DUP1
PUSH* ^3
MUL
SWAP1
PUSH 0x0f
MUL
NOT
PUSH* ^2
AND
ADD
PUSH ^2
MSTORE

## ;end marker
